# -*- coding: utf-8 -*-
"""gestures_hand.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eJ-xBjSzbE8cA29tnMVl91jRxezIPqdR
"""

import tensorflow as tf

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

! git clone https://github.com/nobi1007/HandTalk.git

! ls HandTalk

train_data = pd.read_csv('./HandTalk/sign_mnist_train.csv')
test_data = pd.read_csv('./HandTalk/sign_mnist_test.csv')

train_data.head()
train_data.shape

train_labels = train_data['label'].values
unique_val = np.array(train_labels)
np.unique(unique_val)

plt.figure(figsize = (18,8))
sns.countplot(x = train_labels)

from google.colab import drive
drive.mount('/content/drive')

train_data.drop('label', axis = 1, inplace = True)

images = train_data.values
images = np.array([np.reshape(i, (28, 28)) for i in images])
images = np.array([i.flatten() for i in images])

from sklearn.preprocessing import LabelBinarizer
label_binrizer = LabelBinarizer()
labels = label_binrizer.fit_transform(train_labels)

plt.imshow(images[0].reshape(28,28))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.3, random_state = 101)

import keras
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout

batch_size = 128
num_classes = 24
epochs = 50

x_train = x_train / 255
x_test = x_test / 255

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

plt.imshow(x_train[0].reshape(28,28))

model = Sequential()
model.add(Conv2D(64, kernel_size=(3,3), activation = 'relu', input_shape=(28, 28 ,1) ))
model.add(MaxPooling2D(pool_size = (2, 2)))

model.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))

model.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))

model.add(Flatten())
model.add(Dense(128, activation = 'relu'))
model.add(Dropout(0.20))
model.add(Dense(num_classes, activation = 'softmax'))

model.compile(loss = keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),
              metrics=['accuracy'])
history = model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs=epochs, batch_size=batch_size)



plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title("Accuracy")
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train','test'])
plt.show()

test = pd.read_csv('./HandTalk/sign_mnist_test.csv')

test_labels = test['label']

test.drop('label', axis = 1, inplace = True)

test_images = test.values
test_images = np.array([np.reshape(i, (28, 28)) for i in test_images])
test_images = np.array([i.flatten() for i in test_images])

test_labels = label_binrizer.fit_transform(test_labels)

test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)

test_images.shape

y_pred = model.predict(test_images)

from sklearn.metrics import accuracy_score

accuracy_score(test_labels, y_pred.round())

plt.imshow(test_images[0].reshape(28,28))
print(test_labels[0])

y_pred[0]

model.summary()
model.save('first_handTalk.h5')

new_model = keras.models.load_model('first_handTalk.h5')
new_model.summary()

x2 = test_images[:1]
x2.shape
new_model.predict(x2)

x = test_images[0]
np.shape(x)
x1 = np.reshape(x,(1,28,28,1))
print(np.shape(x1))
new_model.predict(x1)